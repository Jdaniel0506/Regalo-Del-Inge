#include <iostream>
using namespace std;

// ---------------------- Clase Nodo ----------------------
// Representa un elemento de la lista (o pila).
class Nodo {
public:
    int dato;             // Valor del nodo (disco)
    Nodo* siguiente;      // Puntero al siguiente nodo

    Nodo(int d) {
        dato = d;
        siguiente = nullptr;
    }
};

// ---------------------- Clase base Lista ----------------------
// Clase abstracta que representa una estructura de lista enlazada.
class Lista {
protected:
    Nodo* cabeza;         // Puntero al primer nodo

public:
    Lista() {
        cabeza = nullptr;
    }

    // Métodos virtuales puros para que las subclases los implementen
    virtual void push(int dato) = 0;      // Insertar elemento
    virtual int pop() = 0;                // Eliminar y devolver el tope
    virtual void mostrar() = 0;           // Mostrar todos los elementos

    // Verifica si la lista está vacía
    bool vacia() {
        return cabeza == nullptr;
    }

    // Devuelve el valor del tope (sin eliminarlo)
    int top() {
        if (cabeza) return cabeza->dato;
        return -1; // Si está vacía, devuelve -1
    }

    // Cuenta la cantidad de nodos en la lista
    int contarNodos() {
        int contador = 0;
        Nodo* actual = cabeza;
        while (actual) {
            contador++;
            actual = actual->siguiente;
        }
        return contador;
    }
};

// ---------------------- Clase Pila (hereda de Lista) ----------------------
// Implementa una pila (LIFO) usando la lista enlazada
class Pila : public Lista {
public:
    // Inserta un nuevo elemento en la parte superior de la pila
    void push(int dato) override {
        Nodo* nuevo = new Nodo(dato);
        nuevo->siguiente = cabeza;
        cabeza = nuevo;
    }

    // Elimina y devuelve el elemento del tope
    int pop() override {
        if (vacia()) return -1;
        Nodo* temp = cabeza;
        int valor = cabeza->dato;
        cabeza = cabeza->siguiente;
        delete temp;
        return valor;
    }

    // Muestra todos los elementos de la pila
    void mostrar() override {
        Nodo* actual = cabeza;
        while (actual) {
            cout << actual->dato << " ";
            actual = actual->siguiente;
        }
        cout << endl;
    }
};

// ---------------------- Clase JuegoHanoi ----------------------
// Implementa la lógica del juego Torres de Hanoi usando pilas
class JuegoHanoi {
private:
    Pila torreA, torreB, torreC; // Tres torres como pilas
    int numDiscos;               // Número total de discos

public:
    // Constructor: inicializa la torre A con todos los discos
    JuegoHanoi(int n) {
        numDiscos = n;
        for (int i = n; i >= 1; i--) {
            torreA.push(i);
        }
    }

    // Muestra el estado actual de las tres torres
    void mostrarTorres() {
        cout << "\nTorre A: "; torreA.mostrar();
        cout << "Torre B: "; torreB.mostrar();
        cout << "Torre C: "; torreC.mostrar();
        cout << "--------------------------\n";
    }

    // Realiza un movimiento entre dos torres
    bool mover(char origen, char destino) {
        Pila* from = obtenerTorre(origen);
        Pila* to = obtenerTorre(destino);

        if (!from || !to) {
            cout << "Torre invalida.\n";
            return false;
        }

        if (from->vacia()) {
            cout << "La torre está vacia.\n";
            return false;
        }

        int discoOrigen = from->top();
        int discoDestino = to->top();

        // Verifica la regla del juego: no poner un disco más grande sobre uno más pequeño
        if (!to->vacia() && discoOrigen > discoDestino) {
            cout << "No puedes poner un disco más grande sobre uno mas chico.\n";
            return false;
        }

        // Mueve el disco
        to->push(from->pop());
        cout << "Moviste disco " << discoOrigen << " de " << origen << " a " << destino << ".\n";
        return true;
    }

    // Verifica si todos los discos están en la torre C
    bool juegoGanado() {
        return torreC.contarNodos() == numDiscos;
    }

    // Método principal del juego, permite al jugador mover discos
    void jugar() {
        mostrarTorres();
        while (!juegoGanado()) {
            char origen, destino;
            cout << "Mover de (A/B/C): ";
            cin >> origen;
            cout << "Mover a (A/B/C): ";
            cin >> destino;

            mover(toupper(origen), toupper(destino));
            mostrarTorres();
        }
        cout << "¡Felicidades! Has completado el juego.\n";
    }

    // Retorna la torre correspondiente al caracter recibido
    Pila* obtenerTorre(char id) {
        switch (toupper(id)) {
            case 'A': return &torreA;
            case 'B': return &torreB;
            case 'C': return &torreC;
            default: return nullptr;
        }
    }
};

// ---------------------- Función principal ----------------------
int main() {
    int n;
    cout << "Ingrese el numero de discos: ";
    cin >> n;

    if (n <= 0) {
        cout << "Numero invalido de discos.\n";
        return 0;
    }

    JuegoHanoi juego(n);  // Se crea el juego con n discos
    juego.jugar();        // Se inicia el juego

    return 0;
}
